import  os
import  numpy              as  np
import  pylab              as  pl
import  matplotlib.pyplot  as  plt
import  threedhst.eazyPy   as  eazy
import  threedhst.utils    as  utils


##  Define output directory. 
OUTPUT      = '/global/homes/m/mjwilson/Rafelski15/eazy-photoz/colors/'

##  'Five sigma depth' for degraded imaging; noise realisation of uniform noise in Fv. 
fivesig     = 24.5

save        = True
results     = []

fields      = ['aegis',  'cosmos',  'goodsn', 'goodss', 'uds']  ## master catalogue also available.

for field in fields:
  ## `idx` is zero-indexed.
  for idx in np.arange(3): ## 9970
    ##  /global/cscratch1/sd/mjwilson/MUSE/Rafelski15/EAZY/eazy-photoz/threedhst/threedhst/eazyPy.py  
    header, result = eazy.plotExampleSED(idx=idx, pdfname='plot.pdf', MAIN_OUTPUT_FILE='/global/homes/m/mjwilson/Rafelski15/EAZY-UVUDF/photz', OUTPUT_DIRECTORY=OUTPUT,\
                                         CACHE_FILE='Same', lrange=[1.e3, 1.e5], axes=None, individual_templates=False, fnu=False, fivesig=fivesig, field=field)
    
    results.append(result)
            
    if save & (idx % 500 == 0):
      np.savetxt('%s_ugrizyYJHK_%.2lf.txt' % (field, fivesig), np.array(results), fmt='%.3lf', header=header)

results = np.array(results)

if save:
  np.savetxt('%s_ugrizyYJHK_%.2lf.txt' % (field, fivesig), np.array(results), fmt='%.3lf', header=header)              

else:
  print(header)
  print(results)

'''
################################################
#### Pull out data from the BINARY_OUTPUTS files
################################################

## SED, data & fit
sed = eazy.getEazySED(idx=17, MAIN_OUTPUT_FILE='photz', OUTPUT_DIRECTORY=OUTPUT, CACHE_FILE='Same',\
                      scale_flambda=True, verbose=False, individual_templates=False)

lambdaz, temp_sed, lci, obs_sed, fobs, efobs = sed

axes[0].scatter(lci, obs_sed, color='orange', zorder=2)
axes[0].scatter(lci,    fobs, color='green',  marker='s', s=150, zorder=2)

## p(z)
zgrid, pzi, prior = eazy.getEazyPz(17, MAIN_OUTPUT_FILE='photz', OUTPUT_DIRECTORY=OUTPUT,
                                   CACHE_FILE='Same', binaries=None, get_prior=True)
                                   
axes[1].plot(zgrid, pzi, color='black')
axes[1].plot(zgrid, prior/prior.max()*pzi.max(), color='purple')
'''

print("\n\nDone.\n\n")
